{"ast":null,"code":"var _jsxFileName = \"/media/skarlata/DevOps/projects/wisdon/wisdon-ui/src/components/Table/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Flex, Box, Heading, InputLeftElement, InputGroup, Icon, Input } from '@chakra-ui/core';\nimport * as parser from '../../helpers/parser';\n\nconst Table = props => {\n  const {\n    columns,\n    data,\n    useFilter,\n    filterField,\n    title,\n    ...rest\n  } = props;\n  const [filtered, setFiltered] = useState([]);\n  useEffect(() => {\n    setFiltered(data);\n  }, [data]);\n\n  const filterData = event => field => {\n    const value = event.target.value;\n    const found = data.filter(dt => dt[field].includes(value));\n    setFiltered(found);\n  };\n\n  return /*#__PURE__*/React.createElement(Box, Object.assign({}, rest, {\n    backgroundColor: \"white\",\n    rounded: \"md\",\n    p: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Heading, {\n    as: \"h5\",\n    size: \"sm\",\n    mb: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, title), /*#__PURE__*/React.createElement(Flex, {\n    mb: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }\n  }, useFilter && /*#__PURE__*/React.createElement(InputGroup, {\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InputLeftElement, {\n    children: /*#__PURE__*/React.createElement(Icon, {\n      name: \"search-2\",\n      color: \"gray.300\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 53\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Digite aqui o par\\xE2metro de pesquisa\",\n    onChange: filterData(filterField),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Flex, {\n    borderBottom: \"1px\",\n    borderTop: \"1px\",\n    p: \"5px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, columns.map((column, ix) => /*#__PURE__*/React.createElement(Box, {\n    key: ix,\n    mr: \"10px\",\n    w: column.size ? column.size : `${Math.round(100 / columns.length)}%`,\n    cursor: \"pointer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    as: \"h5\",\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 29\n    }\n  }, column.label)))), /*#__PURE__*/React.createElement(Box, {\n    mt: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, filtered.map((dt, ix) => /*#__PURE__*/React.createElement(Flex, {\n    key: ix,\n    backgroundColor: ix % 2 === 0 ? 'blue.50' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  }, columns.map((column, ix) => /*#__PURE__*/React.createElement(Box, {\n    key: ix,\n    w: column.size ? column.size : `${Math.round(100 / columns.length)}%`,\n    py: \"5px\",\n    px: \"5px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 37\n    }\n  }, parser.parse({\n    data: dt[column.field],\n    format: 'display'\n  }, column.type)))))));\n};\n\nexport default Table;","map":{"version":3,"sources":["/media/skarlata/DevOps/projects/wisdon/wisdon-ui/src/components/Table/index.js"],"names":["React","useState","useEffect","Flex","Box","Heading","InputLeftElement","InputGroup","Icon","Input","parser","Table","props","columns","data","useFilter","filterField","title","rest","filtered","setFiltered","filterData","event","field","value","target","found","filter","dt","includes","map","column","ix","size","Math","round","length","label","parse","format","type"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Flex, Box, Heading, InputLeftElement, InputGroup, Icon, Input } from '@chakra-ui/core';\nimport * as parser from '../../helpers/parser';\n\nconst Table = (props) => {\n    const {\n        columns,\n        data,\n        useFilter,\n        filterField,\n        title,\n        ...rest\n    } = props;\n\n    const [filtered, setFiltered] = useState([]);\n\n    useEffect(() => {\n        setFiltered(data);\n    }, [data]);\n\n    const filterData = (event) => field => {\n        const value = event.target.value;\n        const found = data.filter(dt => dt[field].includes(value))\n\n        setFiltered(found);\n    }\n\n    return (\n        <Box\n            {...rest}\n            backgroundColor=\"white\"\n            rounded=\"md\"\n            p={5}    \n        >\n            <Heading\n                as=\"h5\"\n                size=\"sm\"\n                mb=\"10px\"\n            >\n                { title }\n            </Heading>\n           <Flex\n            mb={5}\n           >\n                {useFilter && (\n                    <InputGroup width=\"100%\">\n                        <InputLeftElement children={<Icon name=\"search-2\" color=\"gray.300\" />} />\n                        <Input placeholder=\"Digite aqui o parÃ¢metro de pesquisa\" onChange={filterData(filterField)} />\n                    </InputGroup>\n                )}\n           </Flex>\n            <Flex\n                borderBottom=\"1px\"\n                borderTop=\"1px\"\n                p=\"5px\"\n            >\n                {\n                    columns.map((column, ix) => (\n                        <Box\n                            key={ix}\n                            mr=\"10px\"\n                            w={column.size ? column.size : `${Math.round(100/columns.length)}%`}\n                            cursor=\"pointer\"\n                        >\n                            <Heading\n                                as=\"h5\"\n                                size=\"sm\"\n                            >\n                                { column.label }\n                            </Heading>\n                        </Box>\n                    ))\n                }\n            </Flex>\n            <Box\n                mt=\"20px\"\n            >\n                {\n                    filtered.map((dt,ix) => (\n                        <Flex\n                            key={ix}\n                            backgroundColor={\n                                ix % 2 === 0\n                                ? 'blue.50'\n                                : null\n                            }\n                        >\n                            {\n                               columns.map((column, ix) => (\n                                    <Box\n                                        key={ix}\n                                        w={column.size ? column.size : `${Math.round(100/columns.length)}%`}\n                                        py=\"5px\"\n                                        px=\"5px\"\n                                    >\n                                       { parser.parse({data: dt[column.field], format: 'display'}, column.type) }\n                                    </Box>\n                               ))\n                            }\n                        </Flex>\n                    ))\n                }\n            </Box>\n        </Box>\n    )\n}\n\nexport default Table;"]},"metadata":{},"sourceType":"module"}